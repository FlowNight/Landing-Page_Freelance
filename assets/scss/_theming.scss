@use 'theme/palettes';
@use './theme/colors' with (
    $palette: (
        primary: (
            h: 215,
            s: 15,
            l: 22
        ),
        secondary: (
            h: 179,
            s: 100,
            l: 20
        ),
        neutral: (
            h: 202,
            s: 10,
            l: 50
        ),
        accent: (
            h: 11,
            s: 73,
            l: 65
        ), 
    ),

@use 'functions' as f;

// THEME
@forward './theme/colors';
@forward './theme/fonts';

// GENERATE
@forward './theme/palettes';

$palettes: ();

@each $key, $value in colors.$palette{
    $map: ();
    $map: map-merge($map, ($key: f.create_color_map($value)));
    $palettes: map-merge($palettes, $map);
}

@each $key, $value in colors.$states{
    $map: ();
    $map: map-merge($map, ($key: f.create_color_map($value)));
    $states: map-merge($states, $map);
}

@function color($color: 'neutral', $tone: '500') {
    @return map-get(map-get($palettes, $color), $tone);
}
